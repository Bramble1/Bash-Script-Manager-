#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
#include<time.h>
#include<sys/wait.h>
#include<string.h>
#define SCHEDULED_SCRIPT_LOG "../scripts_repo/scheduled_scripts.txt\0"

struct time_info
{
	int hour;
	int minute;
	int weekday;
};

struct Schedule
{
	char execution_string[100];
	char filename[100];
	int hour;
	int minute;
	int weekday;
	int executed;
};

int execute_task(char *command)
{
	int status;
	pid_t pid;
	
	pid = fork();
	if(pid==-1)
	{
		perror("fork");
		return -1;
	}
	else if(pid==0)
	{
		const char *args[4];

		args[0] = "sh";
		args[1] = "-c";
		args[2] = command;
		args[3] = NULL;
		execv("/bin/sh",args);
		
		exit(-1);
	}

	if(waitpid(pid,&status,0)==-1)
		return -1;
	else if(WIFEXITED(status))
		return WEXITSTATUS(status);

	return -1;		
}

void get_time(struct time_info *current_time)
{
	time_t rawtime = time(NULL);
	if(rawtime==-1)
	{
		perror("time()");
		exit(EXIT_FAILURE);
	}

	struct tm *ptm = localtime(&rawtime);
	if(ptm==NULL)
	{
		perror("localtime()");
		exit(EXIT_FAILURE);
	}

	current_time->hour = ptm->tm_hour;
	current_time->minute = ptm->tm_min;
	current_time->weekday = ptm->tm_wday;	

}

void log_executed_script(char *execution_path)
{
	FILE *fd = fopen("executed_tasks.txt","a");
	if(fd==NULL)
	{
		perror("fopen");
		exit(EXIT_FAILURE);
	}

	fwrite(execution_path,sizeof(execution_path),1,fd);
}

void check_tasks(struct Schedule *task,struct time_info *current_time)
{
	int executed_tasks = 0;
	FILE *fd = fopen(SCHEDULED_SCRIPT_LOG,"r");
	if(fd==NULL)
	{
		perror("fopen:");
		exit(EXIT_FAILURE);
	}

	while(fread(task,sizeof(struct Schedule),1,fd))
	{
		if(task->weekday==current_time->weekday)
			if(task->hour==current_time->hour)
				if(task->minute==current_time->minute)
				{
					execute_task(task->execution_string);
					log_executed_script(task->execution_string);
					executed_tasks = 1;
				}
	}

	if(executed_tasks ==1)
	{
		//remove the task
		rewind(fd);
		char buf[100];
		FILE *fd2 = fopen("executed_tasks.txt","r");
		FILE *fd3 = fopen("tmp.txt","a+");
		while(fread(task,sizeof(struct Schedule),1,fd))
		{
			while(fread(buf,sizeof(buf),1,fd2))
			{
				if(strcmp(buf,task->execution_string)!=0)
				{
					fwrite(task,sizeof(struct Schedule),1,fd3);
				}
			}
		}
		fclose(fd);
		fclose(fd2);
		rewind(fd3);
		remove(SCHEDULED_SCRIPT_LOG);

		fd = fopen(SCHEDULED_SCRIPT_LOG,"a");
		if(fd==NULL)
		{
			perror("fopen error");
			exit(EXIT_FAILURE);
		}
		while(fread(task,sizeof(struct Schedule),1,fd3))
		{
			fwrite(task,sizeof(struct Schedule),1,fd);
		}
		fclose(fd);
		fclose(fd3);
		remove("tmp.txt\0");
		remove("executed_tasks.txt\0");
		executed_tasks = 0;
	}
	else
		fclose(fd);
} 

int main()
{
	struct time_info current_time;
	struct Schedule task;
	
	FILE *fd = fopen(SCHEDULED_SCRIPT_LOG,"w+");
	fclose(fd);

	daemon(1,1);

	while(1){
	
		get_time(&current_time);
		check_tasks(&task,&current_time);
		sleep(25);
	}
	//printf("current hour = %d\ncurrent minute = %d\n current weekday = %d\n",current_time.hour,current_time.minute,current_time.weekday);
	return 0;
}	
